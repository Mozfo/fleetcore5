generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model organization {
  id              String    @id(map: "Tenant_pkey") @default(uuid())
  name            String
  subdomain       String    @unique(map: "Tenant_subdomain_key")
  country_code    String
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  clerk_org_id    String?   @unique(map: "Tenant_clerk_org_id_key") @db.VarChar(255)

  // Soft delete columns
  status          String    @default("active") @db.VarChar(50)
  deleted_at      DateTime? @db.Timestamptz(6)
  deleted_by      String?   @db.Uuid
  deletion_reason String?

  members         member[]

  @@index([status], map: "idx_organization_status")
}

model member {
  id              String       @id(map: "User_pkey") @default(uuid())
  tenant_id       String
  email           String
  clerk_id        String       @unique(map: "User_clerk_id_key")
  role            String
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt

  // Soft delete columns
  status          String       @default("active") @db.VarChar(50)
  deleted_at      DateTime?    @db.Timestamptz(6)
  deleted_by      String?      @db.Uuid
  deletion_reason String?

  organization    organization @relation(fields: [tenant_id], references: [id], map: "User_tenant_id_fkey")

  @@unique([tenant_id, email], map: "User_tenant_id_email_key")
  @@index([status], map: "idx_member_status")
  @@index([deleted_at], map: "idx_member_deleted_at")
}

model sys_demo_lead {
  id                String    @id(map: "DemoLead_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  full_name         String    @db.VarChar(255)
  email             String    @db.VarChar(255)
  demo_company_name String    @db.VarChar(255)
  fleet_size        String    @db.VarChar(50)
  phone             String?   @db.VarChar(50)
  message           String?
  status            String?   @default("pending") @db.VarChar(50)
  country_code      String    @default("AE") @db.VarChar(2)
  assigned_to       String?   @db.Uuid
  qualified_date    DateTime? @db.Timestamptz(6)
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @updatedAt @db.Timestamptz(6)

  // Soft delete columns
  deleted_at        DateTime? @db.Timestamptz(6)
  deleted_by        String?   @db.Uuid
  deletion_reason   String?

  activities        sys_demo_lead_activity[]

  @@index([created_at(sort: Desc)], map: "idx_demo_lead_created")
  @@index([email], map: "idx_demo_lead_email")
  @@index([status], map: "idx_demo_lead_status")
  @@index([demo_company_name], map: "idx_demo_lead_demo_company")
  @@index([country_code], map: "idx_demo_lead_country")
  @@index([assigned_to], map: "idx_demo_lead_assigned")
  @@index([deleted_at], map: "idx_demo_lead_deleted_at")
}

model sys_demo_lead_activity {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lead_id           String    @db.Uuid
  activity_type     String    @db.VarChar(50)
  activity_date     DateTime  @default(now()) @db.Timestamptz(6)
  notes             String?
  outcome           String?   @db.VarChar(50)
  duration          Int?
  priority          String    @default("medium") @db.VarChar(20)
  status            String    @default("completed") @db.VarChar(20)
  performed_by      String    @db.Uuid
  next_action       String?   @db.VarChar(255)
  next_action_date  DateTime? @db.Timestamptz(6)
  created_at        DateTime? @default(now()) @db.Timestamptz(6)


  // Relations
  lead              sys_demo_lead @relation(fields: [lead_id], references: [id], onDelete: Cascade)

  @@index([lead_id], map: "idx_demo_lead_activity_lead")
  @@index([activity_date(sort: Desc)], map: "idx_demo_lead_activity_date")
  @@index([performed_by], map: "idx_demo_lead_activity_performed_by")
  @@index([status], map: "idx_demo_lead_activity_status")
}

model audit_logs {
  id                    String    @id @default(uuid())
  tenant_id             String?   @db.Uuid

  // Action tracking
  action                String    @db.VarChar(100)
  entity_type           String    @db.VarChar(50)
  entity_id             String    @db.VarChar(255)

  // Data snapshots
  snapshot              Json?
  changes               Json?

  // Context
  performed_by          String?   @db.Uuid
  performed_by_clerk_id String?   @db.VarChar(255)
  ip_address            String?   @db.VarChar(45)
  user_agent            String?

  // Metadata
  reason                String?
  metadata              Json?

  created_at            DateTime  @default(now()) @db.Timestamptz(6)

  @@index([tenant_id, created_at(sort: Desc)], map: "idx_audit_tenant_date")
  @@index([entity_type, entity_id], map: "idx_audit_entity")
  @@index([action, created_at(sort: Desc)], map: "idx_audit_action_date")
  @@index([performed_by], map: "idx_audit_performed_by")
}

// ============================================
// SYSTEM TABLES (3)
// ============================================

model system_parameters {
  id               String    @id @default(uuid())
  tenant_id        String?   @db.Uuid
  param_key        String    @db.VarChar(100)
  param_value      String
  data_type        String    @db.VarChar(20)
  country_code     String?   @db.VarChar(2)
  scope            String    @db.VarChar(20)
  description      String?
  validation_rules Json?
  created_at       DateTime  @default(now()) @db.Timestamptz(6)
  updated_at       DateTime  @updatedAt @db.Timestamptz(6)

  @@unique([tenant_id, param_key, country_code], map: "unique_param_per_tenant_country")
  @@index([tenant_id, scope], map: "idx_params_tenant_scope")
  @@index([param_key], map: "idx_params_key")
}

model parameter_audit {
  id           String   @id @default(uuid())
  parameter_id String   @db.Uuid
  old_value    String?
  new_value    String
  changed_by   String   @db.Uuid
  reason       String?
  created_at   DateTime @default(now()) @db.Timestamptz(6)

  @@index([parameter_id, created_at(sort: Desc)], map: "idx_param_audit_param_date")
}

model sequences {
  id            String   @id @default(uuid())
  tenant_id     String   @db.Uuid
  sequence_name String   @db.VarChar(50)
  prefix        String   @db.VarChar(10)
  current_value Int      @default(1)
  updated_at    DateTime @updatedAt @db.Timestamptz(6)

  @@unique([tenant_id, sequence_name], map: "unique_sequence_per_tenant")
}

// ============================================
// SUPPORT TABLES (4)
// ============================================

model documents {
  id            String    @id @default(uuid())
  tenant_id     String    @db.Uuid
  entity_type   String    @db.VarChar(50)
  entity_id     String    @db.Uuid
  document_type String    @db.VarChar(50)
  file_name     String    @db.VarChar(255)
  file_path     String    @db.VarChar(500)
  file_size     Int
  mime_type     String    @db.VarChar(100)
  uploaded_by   String    @db.Uuid
  expires_at    DateTime? @db.Timestamptz(6)
  status        String    @default("active") @db.VarChar(50)
  created_at    DateTime  @default(now()) @db.Timestamptz(6)

  @@index([tenant_id, entity_type, entity_id], map: "idx_docs_entity")
  @@index([expires_at], map: "idx_docs_expiry")
}

model notifications {
  id         String    @id @default(uuid())
  tenant_id  String    @db.Uuid
  user_id    String    @db.Uuid
  type       String    @db.VarChar(50)
  title      String    @db.VarChar(255)
  message    String
  data       Json?
  read_at    DateTime? @db.Timestamptz(6)
  created_at DateTime  @default(now()) @db.Timestamptz(6)

  @@index([tenant_id, user_id, read_at], map: "idx_notifs_user_unread")
}

model custom_fields {
  id          String   @id @default(uuid())
  tenant_id   String   @db.Uuid
  entity_type String   @db.VarChar(50)
  field_name  String   @db.VarChar(100)
  field_type  String   @db.VarChar(50)
  options     Json?
  required    Boolean  @default(false)
  created_at  DateTime @default(now()) @db.Timestamptz(6)

  @@unique([tenant_id, entity_type, field_name], map: "unique_custom_field")
}

model custom_field_values {
  id        String @id @default(uuid())
  tenant_id String @db.Uuid
  field_id  String @db.Uuid
  entity_id String @db.Uuid
  value     String

  @@index([entity_id], map: "idx_custom_values_entity")
}

// ============================================
// FLEET TABLES (8)
// ============================================

model vehicles {
  id             String    @id @default(uuid())
  tenant_id      String    @db.Uuid
  vehicle_code   String    @db.VarChar(50)
  make           String    @db.VarChar(100)
  model          String    @db.VarChar(100)
  year           Int
  license_plate  String    @db.VarChar(50)
  vin            String?   @db.VarChar(50)
  vehicle_type   String    @db.VarChar(50)
  ownership      String    @db.VarChar(50)
  purchase_date  DateTime? @db.Date
  purchase_price Decimal?  @db.Decimal(12, 2)
  lease_start    DateTime? @db.Date
  lease_end      DateTime? @db.Date
  lease_monthly  Decimal?  @db.Decimal(10, 2)
  rental_daily   Decimal?  @db.Decimal(10, 2)
  fuel_type      String    @db.VarChar(50)
  status         String    @default("available") @db.VarChar(50)
  deleted_at     DateTime? @db.Timestamptz(6)
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  updated_at     DateTime  @updatedAt @db.Timestamptz(6)

  @@unique([tenant_id, vehicle_code], map: "unique_vehicle_code_per_tenant")
  @@index([tenant_id, status], map: "idx_vehicles_tenant_status")
  @@index([license_plate], map: "idx_vehicles_plate")
}

model vehicle_assignments {
  id         String    @id @default(uuid())
  tenant_id  String    @db.Uuid
  vehicle_id String    @db.Uuid
  driver_id  String    @db.Uuid
  start_date DateTime  @db.Date
  end_date   DateTime? @db.Date
  status     String    @default("active") @db.VarChar(50)
  notes      String?
  created_at DateTime  @default(now()) @db.Timestamptz(6)

  @@index([tenant_id, vehicle_id, status], map: "idx_assignments_vehicle_status")
  @@index([driver_id, status], map: "idx_assignments_driver_status")
}

model vehicle_maintenance {
  id               String    @id @default(uuid())
  tenant_id        String    @db.Uuid
  vehicle_id       String    @db.Uuid
  maintenance_type String    @db.VarChar(50)
  scheduled_date   DateTime  @db.Date
  completed_date   DateTime? @db.Date
  odometer         Int?
  cost             Decimal?  @db.Decimal(10, 2)
  provider         String?   @db.VarChar(255)
  description      String
  status           String    @default("scheduled") @db.VarChar(50)
  created_at       DateTime  @default(now()) @db.Timestamptz(6)

  @@index([vehicle_id, scheduled_date], map: "idx_maintenance_vehicle_date")
  @@index([tenant_id, status], map: "idx_maintenance_tenant_status")
}

model vehicle_inspections {
  id              String   @id @default(uuid())
  tenant_id       String   @db.Uuid
  vehicle_id      String   @db.Uuid
  inspection_date DateTime @db.Date
  inspector       String   @db.VarChar(255)
  odometer        Int
  passed          Boolean
  issues          Json?
  next_due        DateTime? @db.Date
  created_at      DateTime  @default(now()) @db.Timestamptz(6)

  @@index([vehicle_id, inspection_date(sort: Desc)], map: "idx_inspections_vehicle_date")
}

model vehicle_insurance {
  id             String   @id @default(uuid())
  tenant_id      String   @db.Uuid
  vehicle_id     String   @db.Uuid
  provider       String   @db.VarChar(255)
  policy_number  String   @db.VarChar(100)
  start_date     DateTime @db.Date
  end_date       DateTime @db.Date
  premium        Decimal  @db.Decimal(10, 2)
  coverage       Json
  status         String   @default("active") @db.VarChar(50)
  created_at     DateTime @default(now()) @db.Timestamptz(6)

  @@index([vehicle_id], map: "idx_insurance_vehicle")
  @@index([tenant_id, end_date], map: "idx_insurance_expiry")
}

model vehicle_expenses {
  id           String    @id @default(uuid())
  tenant_id    String    @db.Uuid
  vehicle_id   String    @db.Uuid
  expense_type String    @db.VarChar(50)
  amount       Decimal   @db.Decimal(10, 2)
  date         DateTime  @db.Date
  odometer     Int?
  description  String?
  receipt_url  String?   @db.VarChar(500)
  created_at   DateTime  @default(now()) @db.Timestamptz(6)

  @@index([vehicle_id, date(sort: Desc)], map: "idx_expenses_vehicle_date")
  @@index([tenant_id, expense_type], map: "idx_expenses_type")
}

model vehicle_accidents {
  id             String    @id @default(uuid())
  tenant_id      String    @db.Uuid
  vehicle_id     String    @db.Uuid
  driver_id      String?   @db.Uuid
  date           DateTime  @db.Timestamptz(6)
  location       String    @db.VarChar(255)
  description    String
  damage         String
  at_fault       Boolean?
  claim_number   String?   @db.VarChar(100)
  claim_status   String?   @db.VarChar(50)
  estimated_cost Decimal?  @db.Decimal(10, 2)
  created_at     DateTime  @default(now()) @db.Timestamptz(6)

  @@index([vehicle_id, date(sort: Desc)], map: "idx_accidents_vehicle_date")
}

model vehicle_telemetry {
  id          String   @id @default(uuid())
  tenant_id   String   @db.Uuid
  vehicle_id  String   @db.Uuid
  timestamp   DateTime @db.Timestamptz(6)
  odometer    Int
  fuel_level  Decimal? @db.Decimal(5, 2)
  battery     Decimal? @db.Decimal(5, 2)
  location    Json
  speed       Decimal? @db.Decimal(5, 2)
  data        Json?
  created_at  DateTime @default(now()) @db.Timestamptz(6)

  @@index([vehicle_id, timestamp(sort: Desc)], map: "idx_telemetry_vehicle_time")
}

// ============================================
// DRIVER TABLES (7)
// ============================================

model drivers {
  id               String    @id @default(uuid())
  tenant_id        String    @db.Uuid
  driver_code      String    @db.VarChar(50)
  first_name       String    @db.VarChar(100)
  last_name        String    @db.VarChar(100)
  email            String    @db.VarChar(255)
  phone            String    @db.VarChar(50)
  license_number   String    @db.VarChar(100)
  license_expiry   DateTime  @db.Date
  status           String    @default("active") @db.VarChar(50)
  employment_type  String    @db.VarChar(50)
  hire_date        DateTime  @db.Date
  termination_date DateTime? @db.Date
  emergency_contact Json?
  deleted_at       DateTime? @db.Timestamptz(6)
  created_at       DateTime  @default(now()) @db.Timestamptz(6)
  updated_at       DateTime  @updatedAt @db.Timestamptz(6)

  @@unique([tenant_id, driver_code], map: "unique_driver_code_per_tenant")
  @@index([tenant_id, status], map: "idx_drivers_tenant_status")
  @@index([email], map: "idx_drivers_email")
}

model driver_platforms {
  id          String   @id @default(uuid())
  tenant_id   String   @db.Uuid
  driver_id   String   @db.Uuid
  platform    String   @db.VarChar(50)
  platform_id String   @db.VarChar(100)
  active      Boolean  @default(true)
  created_at  DateTime @default(now()) @db.Timestamptz(6)

  @@unique([driver_id, platform], map: "unique_driver_platform")
  @@index([tenant_id, platform], map: "idx_driver_platforms_tenant_platform")
}

model driver_documents {
  id            String    @id @default(uuid())
  tenant_id     String    @db.Uuid
  driver_id     String    @db.Uuid
  document_type String    @db.VarChar(50)
  document_url  String    @db.VarChar(500)
  issue_date    DateTime  @db.Date
  expiry_date   DateTime? @db.Date
  status        String    @default("valid") @db.VarChar(50)
  created_at    DateTime  @default(now()) @db.Timestamptz(6)

  @@index([driver_id, document_type], map: "idx_driver_docs_driver_type")
  @@index([expiry_date], map: "idx_driver_docs_expiry")
}

model driver_performance {
  id              String  @id @default(uuid())
  tenant_id       String  @db.Uuid
  driver_id       String  @db.Uuid
  period          String  @db.VarChar(20)
  trips           Int
  revenue         Decimal @db.Decimal(10, 2)
  rating          Decimal? @db.Decimal(3, 2)
  cancellations   Int
  acceptance_rate Decimal? @db.Decimal(5, 2)
  created_at      DateTime @default(now()) @db.Timestamptz(6)

  @@unique([driver_id, period], map: "unique_driver_performance_period")
  @@index([tenant_id, period], map: "idx_driver_perf_tenant_period")
}

model driver_scores {
  id         String  @id @default(uuid())
  tenant_id  String  @db.Uuid
  driver_id  String  @db.Uuid
  score      Decimal @db.Decimal(5, 2)
  rank       Int?
  period     String  @db.VarChar(20)
  breakdown  Json
  created_at DateTime @default(now()) @db.Timestamptz(6)

  @@unique([driver_id, period], map: "unique_driver_score_period")
}

model driver_training {
  id              String    @id @default(uuid())
  tenant_id       String    @db.Uuid
  driver_id       String    @db.Uuid
  course          String    @db.VarChar(255)
  completed_date  DateTime  @db.Date
  instructor      String?   @db.VarChar(255)
  certificate_url String?   @db.VarChar(500)
  expiry_date     DateTime? @db.Date
  created_at      DateTime  @default(now()) @db.Timestamptz(6)

  @@index([driver_id], map: "idx_driver_training_driver")
}

model driver_violations {
  id             String   @id @default(uuid())
  tenant_id      String   @db.Uuid
  driver_id      String   @db.Uuid
  violation_type String   @db.VarChar(100)
  date           DateTime @db.Date
  description    String
  fine_amount    Decimal? @db.Decimal(10, 2)
  points         Int?
  status         String   @default("pending") @db.VarChar(50)
  created_at     DateTime @default(now()) @db.Timestamptz(6)

  @@index([driver_id, date(sort: Desc)], map: "idx_driver_violations_driver_date")
}

// ============================================
// EMPLOYER TABLE (1) - France only
// ============================================

model employers {
  id           String   @id @default(uuid())
  tenant_id    String   @db.Uuid
  name         String   @db.VarChar(255)
  siret        String   @db.VarChar(50)
  address      String
  country_code String   @default("FR") @db.VarChar(2)
  contact      Json?
  created_at   DateTime @default(now()) @db.Timestamptz(6)

  @@unique([tenant_id, siret], map: "unique_employer_siret_per_tenant")
}

// ============================================
// REVENUE TABLES (8)
// ============================================

model platform_configurations {
  id          String   @id @default(uuid())
  tenant_id   String   @db.Uuid
  platform    String   @db.VarChar(50)
  api_key     String?  @db.VarChar(255)
  webhook_url String?  @db.VarChar(500)
  active      Boolean  @default(true)
  config      Json?
  created_at  DateTime @default(now()) @db.Timestamptz(6)

  @@unique([tenant_id, platform], map: "unique_platform_config_per_tenant")
}

model revenue_imports {
  id            String   @id @default(uuid())
  tenant_id     String   @db.Uuid
  platform      String   @db.VarChar(50)
  import_date   DateTime @default(now()) @db.Timestamptz(6)
  file_name     String?  @db.VarChar(255)
  period_start  DateTime @db.Date
  period_end    DateTime @db.Date
  total_trips   Int
  total_revenue Decimal  @db.Decimal(12, 2)
  status        String   @default("pending") @db.VarChar(50)
  errors        Json?
  created_at    DateTime @default(now()) @db.Timestamptz(6)

  @@index([tenant_id, platform, period_start], map: "idx_revenue_imports_tenant_platform_period")
}

model driver_revenues {
  id         String   @id @default(uuid())
  tenant_id  String   @db.Uuid
  driver_id  String   @db.Uuid
  import_id  String?  @db.Uuid
  platform   String   @db.VarChar(50)
  trip_date  DateTime @db.Date
  trip_id    String?  @db.VarChar(100)
  gross      Decimal  @db.Decimal(10, 2)
  commission Decimal  @db.Decimal(10, 2)
  net        Decimal  @db.Decimal(10, 2)
  created_at DateTime @default(now()) @db.Timestamptz(6)

  @@index([driver_id, trip_date(sort: Desc)], map: "idx_driver_revenues_driver_date")
  @@index([tenant_id, platform], map: "idx_driver_revenues_tenant_platform")
}

model driver_balances {
  id         String    @id @default(uuid())
  tenant_id  String    @db.Uuid
  driver_id  String    @db.Uuid
  period     String    @db.VarChar(20)
  gross      Decimal   @db.Decimal(10, 2)
  commission Decimal   @db.Decimal(10, 2)
  deductions Decimal   @db.Decimal(10, 2)
  net        Decimal   @db.Decimal(10, 2)
  paid       Boolean   @default(false)
  paid_date  DateTime? @db.Date
  created_at DateTime  @default(now()) @db.Timestamptz(6)

  @@unique([driver_id, period], map: "unique_driver_balance_period")
  @@index([tenant_id, period, paid], map: "idx_driver_balances_tenant_period_paid")
}

model driver_deductions {
  id             String   @id @default(uuid())
  tenant_id      String   @db.Uuid
  driver_id      String   @db.Uuid
  deduction_type String   @db.VarChar(50)
  amount         Decimal  @db.Decimal(10, 2)
  date           DateTime @db.Date
  description    String?
  status         String   @default("pending") @db.VarChar(50)
  created_at     DateTime @default(now()) @db.Timestamptz(6)

  @@index([driver_id, date(sort: Desc)], map: "idx_driver_deductions_driver_date")
}

model driver_payments {
  id             String   @id @default(uuid())
  tenant_id      String   @db.Uuid
  driver_id      String   @db.Uuid
  balance_id     String   @db.Uuid
  amount         Decimal  @db.Decimal(10, 2)
  payment_date   DateTime @db.Date
  payment_method String   @db.VarChar(50)
  reference      String?  @db.VarChar(100)
  status         String   @default("pending") @db.VarChar(50)
  created_at     DateTime @default(now()) @db.Timestamptz(6)

  @@index([driver_id, payment_date(sort: Desc)], map: "idx_driver_payments_driver_date")
}

model payment_batches {
  id            String    @id @default(uuid())
  tenant_id     String    @db.Uuid
  batch_number  String    @db.VarChar(50)
  period        String    @db.VarChar(20)
  total_amount  Decimal   @db.Decimal(12, 2)
  total_drivers Int
  status        String    @default("draft") @db.VarChar(50)
  created_date  DateTime  @default(now()) @db.Timestamptz(6)
  exported_date DateTime? @db.Timestamptz(6)

  @@unique([tenant_id, batch_number], map: "unique_payment_batch_number_per_tenant")
}

model reconciliations {
  id         String   @id @default(uuid())
  tenant_id  String   @db.Uuid
  driver_id  String   @db.Uuid
  period     String   @db.VarChar(20)
  declared   Decimal  @db.Decimal(10, 2)
  calculated Decimal  @db.Decimal(10, 2)
  difference Decimal  @db.Decimal(10, 2)
  status     String   @default("pending") @db.VarChar(50)
  notes      String?
  created_at DateTime @default(now()) @db.Timestamptz(6)

  @@unique([driver_id, period], map: "unique_reconciliation_driver_period")
}